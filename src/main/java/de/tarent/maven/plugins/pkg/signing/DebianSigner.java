/*
 * Maven Packaging Plugin,
 * Maven plugin to package a Project (deb, ipk, izpack)
 * Copyright (C) 2000-2008 tarent GmbH
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License,version 2
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 *
 * tarent GmbH., hereby disclaims all copyright
 * interest in the program 'Maven Packaging Plugin'
 * Signature of Elmar Geese, 11 March 2008
 * Elmar Geese, CEO tarent GmbH.
 */

/**
 * 
 */
package de.tarent.maven.plugins.pkg.signing;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.logging.Log;

import de.tarent.maven.plugins.pkg.TargetConfiguration;
import de.tarent.maven.plugins.pkg.Utils;
import de.tarent.maven.plugins.pkg.WorkspaceSession;
import de.tarent.maven.plugins.pkg.generator.ChangelogFileGenerator;
import de.tarent.maven.plugins.pkg.generator.SourceControlFileGenerator;


/**
 * Generates a changes-file for the package generated by the pkg-goal and signs it.
 * 
 * @author Fabian K&ouml;ster (f.koester@tarent.de) tarent GmbH Bonn
 *
 */
public class DebianSigner {

	/**
	 * The command to use for generating a files-list.
	 */
	protected final String filesGenCmd = "dpkg-distaddfile";

	/**
	 * The command to use for actually signing the Debian-Packages.
	 */
	protected final String signCmd = "debsign";

	/**
	 * The command to use for generating a .changes-file.
	 */
	protected final String changesGenCmd = "dpkg-genchanges";
	
	/**
	 * The command to use for generating a date-string which complies to the RFC-2822 specification.
	 */
	protected final String rfc2822DateCmd = "date";
	
	protected static final String AUTOMATICGENERATIONDISCLAIMER = "Package automatically generated with mvn-pkg-plugin. " +
																  "No changes were provided when packaging.";

	protected TargetConfiguration distroConfiguration;
	
	protected File buildDir;

	private String section;

	private String packageName;

	private String packageVersion;

	private String maintainer;

	private String architecture;

	private String repositoryName;

	private String packageFileNameWithoutExtension;

	private String packageFileName;

	private File tempRoot;
	
	private String userInput;
	
	

	/**
	 * Constructor for use of this class within other classes and not just as a maven goal
	 * @param tc
	 * @param ph
	 * @param awaitUserInput
	 * @throws MojoExecutionException
	 */
	public DebianSigner(WorkspaceSession ws,boolean awaitUserInput) throws MojoExecutionException{

		this.buildDir = ws.getMojo().getBuildDir();
		this.section = ws.getTargetConfiguration().getSection();
		this.packageName = ws.getHelper().getPackageName();
		this.packageVersion = ws.getHelper().getPackageVersion();
		this.maintainer = ws.getTargetConfiguration().getMaintainer();
		this.architecture = ws.getTargetConfiguration().getArchitecture();
		this.repositoryName = ws.getPackageMap().getRepositoryName();
		this.packageFileNameWithoutExtension = ws.getHelper().getPackageFileNameWithoutExtension();
		this.packageFileName = ws.getHelper().getPackageFileName();
		this.tempRoot = ws.getHelper().getTempRoot();
		this.userInput = ws.getMojo().getSignPassPhrase();
		this.awaitUserInput=awaitUserInput;
		
	}
	
	/**
	 * This variable controls the behaviour of the signer. 
	 * <p>If set to true it will show user prompts for some steps.</p>
	 * <p>Default is true</p>
	 */
	protected boolean awaitUserInput = true;
	
	/**
	 * Main steps of the signing process extracted in order to be able to
	 * execute them from outside the class;
	 * 
	 * @param l
	 * @throws MojoExecutionException
	 */
	public void start(Log l) throws MojoExecutionException{
				
		generateFileList(l, buildDir);
		
		generateSourceControlFile(l, buildDir);
			
		generateChangelogFile(l, buildDir);

		generateChangesFile(l, buildDir);

		signPackage(l, buildDir);		
		
	}

	/**
	 * Actually signs the Debian-package using the command defined in the <code>signCmd</code>-variable
	 * 
	 * @param l
	 * @param base
	 * @throws MojoExecutionException
	 */
	protected void signPackage(Log l, File base) throws MojoExecutionException  {
		l.info("calling " + signCmd + " to sign package");

		File pathToChangesFile = new File(base, packageFileNameWithoutExtension + ".changes");
		/**
		 * If a passphrase has been provided we will sign the package manually with gpg and
		 * if not we will give the user the chance to enter the passphrase manually (or to the 
		 * agent to take control)
		 */
		if(!awaitUserInput && userInput != null){
			Utils.exec(new String[] {"gpg", "--no-tty", "--passphrase", userInput, 
									 "--default-key", maintainer,
									 "--no-use-agent",
									 "--yes",
									 "--clearsign", pathToChangesFile.getName()} ,
									 base,
									 "Signing the changes-file failed.",
									 "Error signing the changes-file.");
			
			try {
				FileUtils.copyFile(new File(pathToChangesFile+".asc"), pathToChangesFile);
			} catch (IOException e) {
				throw new MojoExecutionException(e.getMessage(),e);
			}
		}else{
			Utils.exec(new String[] {signCmd,
					pathToChangesFile.getAbsolutePath()} ,
					base,
					"Signing the changes-file failed.",
					"Error signing the changes-file.");
		}
		
		l.info("changes-file signed successfully");
	}

	/**
	 * Executes the command defined in the <code>filesGenCmd</code>-variable to generate a files-list.
	 * 
	 * @param l
	 * @param base
	 * @throws MojoExecutionException
	 */
	protected void generateFileList(Log l, File base) throws MojoExecutionException  {
		l.info("calling " + filesGenCmd + " to generate file-list");

		File pathToFileListFile = new File(tempRoot, "files");

		Utils.exec(new String[] {filesGenCmd,
				"-f" + pathToFileListFile.getAbsolutePath(),
				packageFileName,
				section,
		"optional"} ,
		base,
		"Generating file-list failed.",
		"Error creating the file-list.");
	}
	
	/**
	 * Excecutes the command defined in the <code>rfc2822DateCmd</code>-variable to generate a date-string
	 * complying to the RFC-2822 specification.
	 * 
	 * @param l
	 * @param base
	 * @return
	 * @throws MojoExecutionException
	 */
	protected String getRFC2822Date(Log l, File base) throws MojoExecutionException {
		l.info("calling 'date -R' to get RFC‚Äê2822 date");
		
		InputStream processOutput = Utils.exec(new String[] { rfc2822DateCmd, "-R" } ,
		base,
		"Generating RFC-2822 date failed",
		"Error generating RFC-2822 date.");
		
		if(processOutput != null) { 
			try {
				return new BufferedReader(new InputStreamReader(processOutput)).readLine();
			} catch (IOException e) {
				throw new MojoExecutionException("Generating RFC-2822 date failed. ", e);
			}
		}
		else {
			throw new MojoExecutionException("Generating RFC-2822 date failed (No output from "+rfc2822DateCmd+").");
		}
	}
	
	/**
	 * Generates a changelog file which complies to the Debian-Policy.
	 * 
	 * @param l
	 * @param base
	 * @throws MojoExecutionException
	 */
	protected void generateChangelogFile(Log l, File base) throws MojoExecutionException {
		l.info("generating changelog-file");
		
		File pathToChangelogFile = new File(base, "changelog");
		
		// name, version, repoName, change, author, date
		ChangelogFileGenerator cgen = new ChangelogFileGenerator();
		cgen.setPackageName(packageName);
		cgen.setVersion(packageVersion);
		cgen.setMaintainer(maintainer);
		cgen.setDate(getRFC2822Date(l, base));
		cgen.setRepositoryName(repositoryName);
		cgen.setChanges(promptForChanges());
				
		try {
			cgen.generate(pathToChangelogFile);
		} catch (IOException e) {
			throw new MojoExecutionException("IOException while creating changelog file.",
					e);
		}
	}
	
	/**
	 * Prompts the user for a list of changes since last deployment of the package.
	 * 
	 * @return a String-array containing the changes. The size of the array corresponds to the amount of changes.
	 * @throws MojoExecutionException
	 */
	protected List<String> promptForChanges() throws MojoExecutionException {

		List<String> changes = new ArrayList<String>();
		
		if(awaitUserInput){			
			System.out.println("Please type in your changes since last deployment of this package. One change per line. If you are ready just make an empty line.");
			
			BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
			try {
				
				String line = reader.readLine();
				
				while(line != null && line.trim().length() != 0) {
					
					changes.add(new String(line));
					line = reader.readLine();
				}
				
			} catch(IOException excp) {
				throw new MojoExecutionException("Error getting user-input ", excp);
			}
			if(changes.size()==0){
				changes.add(AUTOMATICGENERATIONDISCLAIMER);
			}
		}else{
			changes.add(AUTOMATICGENERATIONDISCLAIMER);
		}
		return changes;
	}

	protected void generateChangesFile(Log l, File base) throws MojoExecutionException  {
		l.info("calling " + changesGenCmd + " to generate changes-file");

		File pathToControlFile = new File(tempRoot, "control");
		File pathToChangelogFile = new File(base, "changelog");
		File pathToFileListFile = new File(tempRoot, "files");

		File pathToChangesFile = new File(base, packageFileNameWithoutExtension + ".changes");

		InputStream processOutput = Utils.exec(new String[] {changesGenCmd,
				"-b",
				"-c" + pathToControlFile.getAbsolutePath(),
				"-l" + pathToChangelogFile.getAbsolutePath(),
				"-f" + pathToFileListFile.getAbsolutePath(),
				"-m" + maintainer,
				"-e" + maintainer} ,
				tempRoot,
				"Generating changes-file failed",
		"Error creating the changes-file.");
		
		// Store output of the executed process into a .changes-file
		if(processOutput != null) {
			Utils.storeInputStream(processOutput, pathToChangesFile, "Error when storing the changes-file.");
		}
		else {
			throw new MojoExecutionException("Storing the changes-file to \"" +
											 pathToChangesFile.getAbsolutePath() +
											 "\"failed (No output from "+changesGenCmd+").");
		}
	}
	
	/**
	 * Generates a control-file containing a 'Source' line which is needed for generating the .changes-file.
	 * 
	 * @param l
	 * @param base
	 * @throws MojoExecutionException
	 */
	protected void generateSourceControlFile(Log l, File base) throws MojoExecutionException {
		File pathToControlFile = new File(tempRoot, "control");
		
		l.info("creating source-control file: " + pathToControlFile.getAbsolutePath());

		SourceControlFileGenerator cgen = new SourceControlFileGenerator();
		cgen.setSource(packageName);
		cgen.setPackageName(packageName);
		cgen.setVersion(packageVersion);
		cgen.setSection(section);
		cgen.setMaintainer(maintainer);
		cgen.setArchitecture(architecture);

		l.info("creating control file: " + pathToControlFile.getAbsolutePath());
		Utils.createFile(pathToControlFile, "control");

		try	{
			cgen.generate(pathToControlFile);
		}
		catch (IOException ioe)	{
			throw new MojoExecutionException("IOException while creating control file.",
					ioe);
		}
	}
	
}
