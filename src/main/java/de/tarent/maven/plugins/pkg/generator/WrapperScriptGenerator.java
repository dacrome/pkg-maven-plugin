/*
 * Maven Packaging Plugin,
 * Maven plugin to package a Project (deb, ipk, izpack)
 * Copyright (C) 2000-2008 tarent GmbH
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License,version 2
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 *
 * tarent GmbH., hereby disclaims all copyright
 * interest in the program 'Maven Packaging Plugin'
 * Signature of Elmar Geese, 11 March 2008
 * Elmar Geese, CEO tarent GmbH.
 */

package de.tarent.maven.plugins.pkg.generator;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.Properties;

public class WrapperScriptGenerator
{
  String bootClasspath;
  
  String classpath;
  
  String mainClass;
  
  String libraryPath;
  
  String classmapFile;

  String maxJavaMemory;
  
  String custom;
  
  Properties properties = new Properties();
  
  public void setProperties(Properties props)
  {
	properties = props;  
  }

  public void setMaxJavaMemory(String newMaxJavaMemory) 
  {
    this.maxJavaMemory = newMaxJavaMemory;
  }

  public String getMaxJavaMemory() 
  {
    return this.maxJavaMemory;
  }
  
  public String getLibraryPath()
  {
    return libraryPath;
  }

  public void setLibraryPath(String libraryPath)
  {
    this.libraryPath = libraryPath;
  }

  public String getBootClasspath()
  {
    return bootClasspath;
  }

  public void setBootClasspath(String bootClasspath)
  {
    this.bootClasspath = bootClasspath;
  }

  public String getClasspath()
  {
    return classpath;
  }

  public void setClasspath(String classpath)
  {
    this.classpath = classpath;
  }

  public String getMainClass()
  {
    return mainClass;
  }

  public void setMainClass(String mainClass)
  {
    this.mainClass = mainClass;
  }
  
  public void generate(File file) throws IOException
  {
   if(!file.exists())
     file.createNewFile();
   
   PrintWriter w = new PrintWriter(new FileOutputStream(file));
   
   w.println("#!/bin/sh");
   w.println("# This file is autogenerated by the maven-pkg-plugin. The source responsible");
   w.println("# for this script can be found in class: " + getClass().getName());
   w.println();
   w.println("# You can provide additional VM arguments by setting the VMARGS environment variable.");
   
   // Note: The variables of the resulting script are created in a way that they will have
   // no effect on the final invocation line if the corresponding fields where not
   // set in this instance.

   w.println("BOOTCLASSPATH_ARG=" + createScriptValue("-Xbootclasspath/a:", bootClasspath));
   w.println();
   
   w.println("CLASSPATH_ARG=" + createScriptValue("-cp ", classpath));
   w.println();
   
   w.println("MAIN_CLASS=" + mainClass);
   w.println();

   w.println("# Path of the shared libraries (e.g. for SWT");
   w.println("LIBRARY_PATH_ARG=" + createScriptValue("-Djava.library.path=", libraryPath));
   w.println();

   w.println("# Path to BC-ABI compiled classes. Has no effect on runtimes other than GCJ.");
   w.println("DB_PATH_ARG=" + createScriptValue("-Dgnu.gcj.precompiled.db.path=", classmapFile));
   w.println();
   
   w.println("# Additional system properties which are special for this application:");
   w.println("SYSTEM_PROPERTIES=" + createScriptValue("", createPropertyLine()));
   w.println();
   
   w.println("# Allows overriding the VM by setting the JAVA environment variable.");
   w.println("if [ x${JAVA} = x ];");
   w.println("then");
   w.println("\tJAVA=java");
   w.println("fi");
   w.println();
   
   if (custom != null)
     {
       w.println(custom);
       w.println();
     }

   w.println("exec ${JAVA} "+getMemParameter()+" ${VMARGS} ${BOOTCLASSPATH_ARG} ${CLASSPATH_ARG} ${LIBRARY_PATH_ARG} ${DB_PATH_ARG} ${SYSTEM_PROPERTIES} ${MAIN_CLASS} ${@}");

   w.close();
  }
  
  public void generateBatchFile(File file) throws IOException
  {
   if(!file.exists())
     file.createNewFile();
   
   PrintWriter w = new PrintWriter(new FileOutputStream(file));
   
   w.println("@echo off");
   w.println("rem This file is autogenerated by the maven-pkg-plugin. The source responsible");
   w.println("rem for this script can be found in class: " + getClass().getName());
   w.println();

   w.println("set BOOTCLASSPATH_ARG=" + createScriptValueWindows("-Xbootclasspath/a:", bootClasspath));
   w.println();

   w.println("set CLASSPATH_ARG=" + createScriptValueWindows("-cp ", classpath));
   w.println();
   
   w.println("set MAIN_CLASS=" + mainClass);
   w.println();

   w.println("rem Path of the shared libraries (e.g. for SWT");
   w.println("set LIBRARY_PATH_ARG=" + createScriptValueWindows("-Djava.library.path=", libraryPath));
   w.println();

   w.println("rem Additional system properties which are special for this application:");
   w.println("set SYSTEM_PROPERTIES=" + createScriptValueWindows("", createPropertyLine()));
   w.println();

   w.println("rem Path to BC-ABI compiled classes. Has no effect on runtimes other than GCJ.");
   w.println("set DB_PATH_ARG=" + createScriptValueWindows("-Dgnu.gcj.precompiled.db.path=", classmapFile));
   w.println();

   w.println("start javaw " + getMemParameter() + " %BOOTCLASSPATH_ARG% %CLASSPATH_ARG% %LIBRARY_PATH_ARG% %DB_PATH_ARG% %SYSTEM_PROPERTIES% %MAIN_CLASS% %1 %2 %3 %4 %5 %6 %7 %8 %9");
   
   w.close();
  }

  /**
   * Provide the vm memory paraemters
   */
  protected String getMemParameter() 
  {
    if (maxJavaMemory == null || maxJavaMemory.length() == 0)
          return "";
    return "-Xmx"+maxJavaMemory;
  }
    
  /**
   * Returns the concatenation of prefix and value in quotes. If <code>value</code>
   * is not set a quoted empty string is returned.
   * 
   * This is used to conveniently create correctly quoted script variable values.
   * 
   * @param prefix
   * @param value
   * @return
   */
  private String createScriptValue(String prefix, String value)
  {
    return (value != null && value.length() > 0)
           ? "\"" + prefix + value + "\""
           : "\"\"";
  }
  
  /**
   * Returns the concatenation of prefix and value. If <code>value</code>
   * is not set an empty string is returned.
   * 
   * <p>To create correct Windows path names ":"s and "/"s are replaced
   * by "\";\"" and "\". The result is also enclosed by double-quotes.
   * This done to make sure windows path names containing
   * spaces are properly quoted.</p>
   * 
   * @param prefix
   * @param value
   * @return
   */
  private String createScriptValueWindows(String prefix, String value)
  {
    return (value != null && value.length() > 0)
           ? prefix + "\"" + value.replaceAll(":", "\";\"").replace('/', '\\') + "\"": "";
  }
  
  /** Generates a command line string of system properties.
   * 
   * @return
   */
  private String createPropertyLine()
  {
    if (properties == null)
      return "";
	StringBuffer buf = new StringBuffer();
	
	Iterator ite = properties.keySet().iterator();
	while (ite.hasNext())
	{
		String name = (String) ite.next();
		String value = (String) properties.get(name);
		
		buf.append("-D");
		buf.append(name);
		buf.append("=");
		buf.append(value);
		buf.append(" ");
	}
	
	return buf.toString();
  }

  public String getClassmapFile()
  {
    return classmapFile;
  }

  public void setClassmapFile(String classmapFile)
  {
    this.classmapFile = classmapFile;
  }

  public String getCustom()
  {
    return custom;
  }

  public void setCustom(String custom)
  {
    this.custom = custom;
  }

}
