/*
 * Maven Packaging Plugin,
 * Maven plugin to package a Project (deb, ipk, izpack)
 * Copyright (C) 2000-2008 tarent GmbH
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License,version 2
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 *
 * tarent GmbH., hereby disclaims all copyright
 * interest in the program 'Maven Packaging Plugin'
 * Signature of Elmar Geese, 11 March 2008
 * Elmar Geese, CEO tarent GmbH.
 */

package de.tarent.maven.plugins.pkg.generator;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.Properties;

import de.tarent.maven.plugins.pkg.Path;

public class WrapperScriptGenerator {
	Path bootClasspath = new Path();

	Path classpath = bootClasspath;

	String mainClass;

	Path libraryPath;

	String classmapFile;

	String maxJavaMemory;

	String customCodeUnix;

	String customCodeWindows;

	Properties properties = new Properties();

	public void setProperties(Properties props) {
		properties = props;
	}

	public void setMaxJavaMemory(String newMaxJavaMemory) {
		this.maxJavaMemory = newMaxJavaMemory;
	}

	public String getMaxJavaMemory() {
		return this.maxJavaMemory;
	}

	public Path getLibraryPath() {
		return libraryPath;
	}

	public void setLibraryPath(Path libraryPath) {
		this.libraryPath = libraryPath;
	}

	public Path getBootClasspath() {
		return bootClasspath;
	}

	public void setBootClasspath(Path bootClasspath) {
		this.bootClasspath = bootClasspath;
	}

	public Path getClasspath() {
		return classpath;
	}

	public void setClasspath(Path classpath) {
		this.classpath = classpath;
	}

	public String getMainClass() {
		return mainClass;
	}

	public void setMainClass(String mainClass) {
		this.mainClass = mainClass;
	}

	public void generate(File file) throws IOException {
		if (!file.exists()) {
			file.createNewFile();
		}
		PrintWriter w = new PrintWriter(new FileOutputStream(file));

		w.println("#!/bin/sh");
		w.println("# This file is autogenerated by the pkg-maven-plugin. The source responsible");
		w.println("# for this script can be found in class: "
				+ getClass().getName());
		w.println();
		w.println("# You can provide additional VM arguments by setting the VMARGS environment variable.");
		w.println();
		w.println("# You can also call this script with the Following modifiers:");
		w.println("#     -d");
		w.println("#        Enables debugging-p PORTNUMBER. -d Will enable debugging and -p will set a specific port for the debugging session.");
		w.println("#     -p PORTNUMBER");
		w.println("#        Sets a specific port for the debugging session.");
		w.println("#     -j ");
		w.println("#        Enables the JMX Remote console (port 9876).");
		w.println("#     -r [PORTNUMBER]");
		w.println("#        Overrides the default port for the JMX Remote console.");
		w.println("#     -s");
		w.println("#        Disables ssl for the JMX Remote console.");
		w.println("#     -a");
		w.println("#        Disables authentication for the JMX Remote console.");
		w.println();
		w.println("DEFAULTDEBUGPORT=\"8000\"");
		w.println("DEFAULTJMXPORT=\"9876\"");
		w.println();
		w.println("while getopts \"dp:jr:sa\" flag");
		w.println("do");
		w.println("case $flag in");
		w.println("	  d ) DEBUGARGS=\"-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=0.0.0.0:\" ;;");
		w.println("	  p ) DEBUGPORT=$OPTARG ;;");
		w.println("	  j ) JMXARGS=\"-Dcom.sun.management.jmxremote.port=\" ;;");
		w.println("	  r ) JMXPORT=$OPTARG ;;");
		w.println("	  s ) JMXSSLARGS=\"-Dcom.sun.management.jmxremote.ssl=false\" ;;");
		w.println("	  a ) JMXAUTHARGS=\"-Dcom.sun.management.jmxremote.authenticate=false\" ;;");
		w.println("	  esac");
		w.println("done");
		w.println("shift $(($OPTIND - 1))");
		w.println();
		w.println("if [ \"$JMXARGS\" ]; then");
		w.println("	if [ -z \"$JMXPORT\" ]; then");
		w.println("		JMXARGS=$JMXARGS$DEFAULTJMXPORT");
		w.println("	else");
		w.println("		JMXARGS=$JMXARGS$JMXPORT");
		w.println("	fi");
		w.println("fi");
		w.println();
		w.println("if [ \"$DEBUGARGS\" ]; then");
		w.println("	if [ -z \"$DEBUGPORT\" ]; then");
		w.println("		DEBUGARGS=$DEBUGARGS$DEFAULTDEBUGPORT");
		w.println("	else");
		w.println("		DEBUGARGS=$DEBUGARGS$DEBUGPORT");
		w.println("	fi");
		w.println("fi");
		w.println();
		// Note: The variables of the resulting script are created in a way that
		// they will have
		// no effect on the final invocation line if the corresponding fields
		// where not
		// set in this instance.

		w.println("BOOTCLASSPATH_ARG="
				+ createScriptValue("-Xbootclasspath/a:",
						bootClasspath.toUnixPath()));
		w.println();

		w.println("CLASSPATH_ARG="
				+ createScriptValue("-cp ", classpath.toUnixPath()));
		w.println();

		w.println("MAIN_CLASS=" + mainClass);
		w.println();

		w.println("# Path of the shared libraries (e.g. for SWT");
		w.println("LIBRARY_PATH_ARG="
				+ createScriptValue("-Djava.library.path=",
						libraryPath.toUnixPath()));
		w.println();

		w.println("# Path to BC-ABI compiled classes. Has no effect on runtimes other than GCJ.");
		w.println("DB_PATH_ARG="
				+ createScriptValue("-Dgnu.gcj.precompiled.db.path=",
						classmapFile));
		w.println();

		w.println("# Additional system properties which are special for this application:");
		w.println("SYSTEM_PROPERTIES="
				+ createScriptValue("", createPropertyLine()));
		w.println();

		w.println("# Allows overriding the VM by setting the JAVA environment variable.");
		w.println("if [ x${JAVA} = x ];");
		w.println("then");
		w.println("\tJAVA=java");
		w.println("fi");
		w.println();

		if (customCodeUnix != null) {
			w.println(customCodeUnix);
			w.println();
		}

		w.println("exec ${JAVA} "
				+ getMemParameter()
				+ " ${DEBUGARGS} ${VMARGS} ${JMXARGS} ${JMXSSLARGS} ${JMXAUTHARGS} ${BOOTCLASSPATH_ARG} ${CLASSPATH_ARG} ${LIBRARY_PATH_ARG} ${DB_PATH_ARG} ${SYSTEM_PROPERTIES} ${MAIN_CLASS} ${@}");

		w.close();
	}

	public void generateBatchFile(File file) throws IOException {
		if (!file.exists()) {
			file.createNewFile();
		}
		PrintWriter w = new PrintWriter(new FileOutputStream(file));

		w.println("@echo off");
		w.println("rem This file is autogenerated by the pkg-maven-plugin. The source responsible");
		w.println("rem for this script can be found in class: "
				+ getClass().getName());
		w.println();

		w.println("rem Comment in the DEBUGARGS variable to have a TCP based debugging environment.");
		w.println("rem DEBUGARGS=\"-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=0.0.0.0:8000\"");
		w.println();

		w.println("set BOOTCLASSPATH_ARG="
				+ createScriptValueWindows("-Xbootclasspath/a:",
						bootClasspath.toWindowPath()));
		w.println();

		w.println("set CLASSPATH_ARG="
				+ createScriptValueWindows("-cp ", classpath.toWindowPath()));
		w.println();

		w.println("set MAIN_CLASS=" + mainClass);
		w.println();

		w.println("rem Path of the shared libraries (e.g. for SWT");
		w.println("set LIBRARY_PATH_ARG="
				+ createScriptValueWindows("-Djava.library.path=",
						libraryPath.toWindowPath()));
		w.println();

		w.println("rem Additional system properties which are special for this application:");
		w.println("set SYSTEM_PROPERTIES="
				+ createScriptValueWindows("", createPropertyLine()));
		w.println();

		w.println("rem Path to BC-ABI compiled classes. Has no effect on runtimes other than GCJ.");
		w.println("set DB_PATH_ARG="
				+ createScriptValueWindows("-Dgnu.gcj.precompiled.db.path=",
						classmapFile));
		w.println();

		if (customCodeWindows != null) {
			w.println(customCodeWindows);
			w.println();
		}

		w.println("start javaw "
				+ getMemParameter()
				+ " %DEBUGARGS %BOOTCLASSPATH_ARG% %CLASSPATH_ARG% %LIBRARY_PATH_ARG% %DB_PATH_ARG% %SYSTEM_PROPERTIES% %MAIN_CLASS% %1 %2 %3 %4 %5 %6 %7 %8 %9");

		w.close();
	}

	/**
	 * Provide the vm memory paraemters
	 */
	protected String getMemParameter() {
		if (maxJavaMemory == null || maxJavaMemory.length() == 0) {
			return "";
		}
		return "-Xmx" + maxJavaMemory;
	}

	/**
	 * Returns the concatenation of prefix and value in quotes. If
	 * <code>value</code> is not set a quoted empty string is returned.
	 * 
	 * This is used to conveniently create correctly quoted script variable
	 * values.
	 * 
	 * <p>
	 * Package private to allow access from test case.
	 * </p>
	 * 
	 * @param prefix
	 * @param value
	 * @return
	 */
	String createScriptValue(String prefix, String value) {
		return (value != null && value.length() > 0) ? "\"" + prefix + value
				+ "\"" : "\"\"";
	}

	/**
	 * Returns the concatenation of prefix and value. If <code>value</code> is
	 * not set an empty string is returned.
	 * 
	 * <p>
	 * To create correct Windows path names ":"s and "/"s are replaced by
	 * "\";\"" and "\". The result is also enclosed by double-quotes. This done
	 * to make sure windows path names containing spaces are properly quoted.
	 * </p>
	 * 
	 * <p>
	 * Package private to allow access from test case.
	 * </p>
	 * 
	 * @param prefix
	 * @param value
	 * @return
	 */
	String createScriptValueWindows(String prefix, String value) {
		return (value != null && value.length() > 0) ? prefix + "\"" + value
				+ "\"" : "";
	}

	/**
	 * Generates a command line string of system properties.
	 * 
	 * @return
	 */
	private String createPropertyLine() {
		if (properties == null) {
			return "";
		}
		StringBuffer buf = new StringBuffer();

		Iterator<Object> ite = properties.keySet().iterator();
		while (ite.hasNext()) {
			String name = (String) ite.next();
			String value = (String) properties.get(name);

			buf.append("-D");
			buf.append(name);
			buf.append("=");
			buf.append(value);
			buf.append(" ");
		}

		return buf.toString();
	}

	public String getClassmapFile() {
		return classmapFile;
	}

	public void setClassmapFile(String classmapFile) {
		this.classmapFile = classmapFile;
	}

	public String getCustomCodeUnix() {
		return customCodeUnix;
	}

	public void setCustomCodeUnix(String custom) {
		this.customCodeUnix = custom;
	}

	public String getCustomCodeWindows() {
		return customCodeWindows;
	}

	public void setCustomCodeWindows(String customCodeWindows) {
		this.customCodeWindows = customCodeWindows;
	}

}
